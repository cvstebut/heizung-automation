{#
    Debug - Generate Switch - visible from HA
-#}
sensor:
{%- for ha in ha_sensors %}
  - platform: homeassistant
    id: {{ ha.id }}
    name: "{{ name }} Temperatur{% if ha.position %} - {{ ha.position }}{% endif %}"
    entity_id: {{ ha.entity_id }}
{% endfor %}
  - platform: template
    name: "{{ name }} Temperatur - gemittelt"
    id: sensor_{{ id }}
    update_interval: 10s
    filters:
      - median:
          window_size: 5
          send_first_at: 1
    lambda: |-
        ESP_LOGD("custom", "{{ name }} - Temperatur - gemittelt: %f", {{ weighted_sensors }});
        return {{ weighted_sensors }};
  - platform: pid
    name: "{{ name }} - PID KP"
    type: KP
    climate_id: climate_pid_{{ id}}
  - platform: pid
    name: "{{ name }} - PID KI"
    type: KI
    climate_id: climate_pid_{{ id}}
  - platform: pid
    name: "{{ name }} - PID KD"
    type: KD
    climate_id: climate_pid_{{ id}}
  - platform: pid
    name: "{{ name }} - PID HEAT"
    type: HEAT
    climate_id: climate_pid_{{ id}}

climate:
  - platform: pid
    id: climate_pid_{{ id}}
    name: "{{ name }} Climate PID"
    sensor: sensor_{{ id }}
    heat_output: output_{{ id }}
    default_target_temperature: {{ pid.default }}Â°C
    control_parameters:
      kp: {{ pid.p }}
      ki: {{ pid.i }}
      kd: {{ pid.d }}

{#
    delay: distribute opening of all circuits across all areas
-#}
output:
  - platform: template
    id: output_{{ id }}
    type: float
    write_action:
{%- for c in circuits %}
      - if:
          condition:
            lambda: return ((state == 0.0));
          then:
            - logger.log: "-- output_{{ id }}: write_action triggered with state == 0.0"
          else:
            - logger.log: "-- output_{{ id }}: write_action triggered with state <> 0"
      - delay: !lambda "return {{ interval }} * {{ loop.index0 + circuit_offset }} / {{ circuit_count }} * 60 * 1000;"
      - output.set_level:
          id: slow_pwm_{{ id }}_{{ loop.index }}
          level: !lambda return state;
{%- endfor %}
{% for c in circuits %}
  - platform: slow_pwm
    id: slow_pwm_{{ id }}_{{ loop.index }}
    pin:
      number: {{ c.gpio_pin }}
      inverted: false
      mode:
        output: true
        pulldown: True
    period:
      minutes: {{ interval }}
    restart_cycle_on_state_change: false
    turn_on_action:
      then:
        - lambda: |-
            id(stellventil_display_{{ c.number }}).publish_state(true);
    turn_off_action:
      then:
        - lambda: |-
            id(stellventil_display_{{ c.number }}).publish_state(false);
{% endfor %}

# sensors enabling display of output state in HA
binary_sensor:
{%- for c in circuits %}
  - platform: template
    id: stellventil_display_{{ c.number }}
    name: "Stellventil - {{ level }} - {{ c.number }} - {{ c.position }}"
{% endfor %}

